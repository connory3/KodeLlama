import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;

import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Device;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.events.DragDetectEvent;
import org.eclipse.swt.events.DragDetectListener;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseMoveListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.layout.FillLayout;

public class MainWindow extends ApplicationWindow// TODO add in List of field objects (see Matthew's code). Also, make other changes from Bitching2
{
	private boolean runnable; // Can we run the current project? (Is the Execution Tab open?)
	private final FormToolkit formToolkit = new FormToolkit(
			Display.getDefault()); // I have no idea what this does. It was autogenerated. Don't delete it.
	
	private Text codeBox; // The textbox containing the code
	private Text txtOutput; // The textbox outputting commands and info from the project
	private Text commandLine; // The textbox for entering commands
	
	int objectBeingDragged; // The object we are moving around the display
	ArrayList<Llama> programObjects; // The objects in the program
	boolean[] selectedObject; // The objects currently selected
	Llama[] objectLabels; // The objects in the llamaBank
	List listObjects; // The list of objects in play on the field
	Interpreter interpreter; // This will compile and run the code
	Browser browser;// The help browser
	String homeURL = this.getClass().getResource("help/helpHome.htm").toString();// The url for the home file
	
	/**
	 * Create the application window.
	 */
	public MainWindow()
	{
		super(null);
		runnable = false;// We start in the Code tab, so we can't run anything
		objectBeingDragged = -1;// No objects are selected from the Llamabank
		programObjects = new ArrayList<Llama>(0);// Initialize the list of objects currently in play
		interpreter = new Interpreter();
	}
	
	/**
	 * Create contents of the application window.
	 * 
	 * @param parent
	 */
	@Override
	protected Control createContents(Composite parent)
	{
		// Begin auto-generated code from Design tab
		setStatus("");
		Composite container = new Composite(parent, SWT.NONE);
		container.setLayout(new GridLayout(1, false));
		
		Composite toolbar = new Composite(container, SWT.NONE);
		toolbar.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_toolbar = new GridData(SWT.LEFT, SWT.CENTER, true, false,
				1, 1);
		gd_toolbar.widthHint = 3000;
		toolbar.setLayoutData(gd_toolbar);
		
		Button newBtn = new Button(toolbar, SWT.NONE);
		newBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				newProject();// Open a new project (see lines at bottom of class)
			}
		});
		newBtn.setText("New");
		newBtn.setToolTipText("New");
		newBtn.setImage(SWTResourceManager.getImage(MainWindow.class, "/pictures/New.gif"));
		
		Button saveBtn = new Button(toolbar, SWT.NONE);
		saveBtn.setText("Save");
		saveBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				saveProject();// Save project (see lines at bottom of class)
			}
		});
		saveBtn.setToolTipText("Save");
		saveBtn.setImage(SWTResourceManager.getImage(MainWindow.class, "/pictures/Save.gif"));
		
		Button openBtn = new Button(toolbar, SWT.NONE);
		openBtn.setText("Open");
		openBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				loadProject();// Load project (see lines at bottom of class)
			}
		});
		openBtn.setToolTipText("Load");
		openBtn.setImage(SWTResourceManager.getImage(MainWindow.class, "/pictures/Open.gif"));
		
		Button runBtn = new Button(toolbar, SWT.NONE);
		runBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				if (runnable)// Test to see if we are in the Execution Tab
				{
					runProject();// Run project (see lines at bottom of class)
				}
				else
				// We are in the code tab
				{
					// Notify the user why we can't run the program
					MessageBox error = new MessageBox(getShell());
					error.setMessage("Please open the Execution Tab before running your project");
					error.open();
				}
			}
		});
		runBtn.setText("Run");
		runBtn.setToolTipText("Run");
		runBtn.setImage(SWTResourceManager.getImage(MainWindow.class, "/pictures/Play.gif"));
		
		Button stopBtn = new Button(toolbar, SWT.NONE);
		stopBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				if (runnable)// Are we in Execution Tab
				{
					stopProject();// Stop Project
				}
			}
		});
		stopBtn.setText("Stop");
		stopBtn.setToolTipText("Stop");
		stopBtn.setImage(SWTResourceManager.getImage(MainWindow.class, "/pictures/Halt.gif"));
		
		final TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				// If we are in Execution Tab, make runnable true
				runnable = (tabFolder.getSelectionIndex() == 1) ? true : false;
				if (!runnable)// If we change to Code tab
				{
					stopProject();// Automatically stop the project
				}
			}
		});
		GridData gd_tabFolder = new GridData(SWT.LEFT, SWT.CENTER, true, true,
				1, 1);
		gd_tabFolder.heightHint = 2000;
		gd_tabFolder.widthHint = 3000;
		tabFolder.setLayoutData(gd_tabFolder);
		
		TabItem codingTab = new TabItem(tabFolder, SWT.NONE);
		codingTab.setText("Code");
		
		Composite codeTabArea = new Composite(tabFolder, SWT.NONE);
		codingTab.setControl(codeTabArea);
		formToolkit.paintBordersFor(codeTabArea);
		codeTabArea.setLayout(new GridLayout(2, false));
		
		codeBox = new Text(codeTabArea, SWT.BORDER | SWT.H_SCROLL
				| SWT.V_SCROLL | SWT.SEARCH | SWT.CANCEL | SWT.MULTI);
		GridData gd_codeBox = new GridData(SWT.LEFT, SWT.TOP, true, true, 1, 1);
		gd_codeBox.heightHint = 2000;
		gd_codeBox.widthHint = 3000;
		codeBox.setLayoutData(gd_codeBox);
		formToolkit.adapt(codeBox, true, true);
		
		Composite browserArea = new Composite(codeTabArea, SWT.NONE);
		browserArea.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, true, 1, 1));
		formToolkit.adapt(browserArea);
		formToolkit.paintBordersFor(browserArea);
		GridLayout gl_browserArea = new GridLayout(1, false);
		gl_browserArea.marginWidth = 0;
		gl_browserArea.marginHeight = 0;
		browserArea.setLayout(gl_browserArea);
		
		Composite navButtons = new Composite(browserArea, SWT.NONE);
		navButtons.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_navButtons = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_navButtons.widthHint = 250;
		navButtons.setLayoutData(gd_navButtons);
		formToolkit.adapt(navButtons);
		formToolkit.paintBordersFor(navButtons);
		
		Button btnBack = new Button(navButtons, SWT.NONE);
		btnBack.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				browser.back();
			}
		});
		formToolkit.adapt(btnBack, true, true);
		btnBack.setText("Back");
		
		Button btnHome = new Button(navButtons, SWT.NONE);
		btnHome.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				browser.setUrl(homeURL);
			}
		});
		formToolkit.adapt(btnHome, true, true);
		btnHome.setText("Home");
		
		Button btnForward = new Button(navButtons, SWT.NONE);
		btnForward.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				browser.forward();
			}
		});
		formToolkit.adapt(btnForward, true, true);
		btnForward.setText("Forward");
		browser = new Browser(browserArea, SWT.BORDER);
		GridData gd_browser = new GridData(SWT.LEFT, SWT.CENTER, false, true, 1, 1);
		gd_browser.widthHint = 250;
		gd_browser.heightHint = 2000;
		browser.setLayoutData(gd_browser);
		browser.setUrl(homeURL);
		formToolkit.adapt(browser);
		formToolkit.paintBordersFor(browser);
		
		TabItem execTab = new TabItem(tabFolder, SWT.NONE);
		execTab.setText("Execution");
		
		Composite execTabArea = formToolkit
				.createComposite(tabFolder, SWT.NONE);
		execTab.setControl(execTabArea);
		formToolkit.paintBordersFor(execTabArea);
		execTabArea.setLayout(new GridLayout(2, false));
		
		final Composite display = new Composite(execTabArea, SWT.BORDER);
		GridData gd_display = new GridData(SWT.LEFT, SWT.TOP, true, true, 1, 1);
		gd_display.heightHint = 2000;
		gd_display.widthHint = 3000;
		display.setLayoutData(gd_display);
		formToolkit.adapt(display);
		formToolkit.paintBordersFor(display);
		
		Composite llamaBank = new Composite(execTabArea, SWT.BORDER
				| SWT.V_SCROLL);
		GridData gd_llamaBank = new GridData(SWT.LEFT, SWT.TOP, true, true,
				1, 1);
		gd_llamaBank.widthHint = 273;
		gd_llamaBank.heightHint = 512;
		llamaBank.setLayoutData(gd_llamaBank);
		formToolkit.adapt(llamaBank);
		formToolkit.paintBordersFor(llamaBank);
		
		// Generate Llamas for Llama Bank
		objectLabels = new Llama[32];// Is really a 4x8 matrix of Llamas (extended Labels)
		// Each boolean in selectedObject corresponds to a llama. When the llama is selected, the corresponding boolean becomes true
		selectedObject = new boolean[32];
		int counter = 0;// Iterates through each Llama as we make them
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				objectLabels[counter] = new Llama(llamaBank, 64 * i + 32, 64 * j + 32, 64, 64);// Place the llamas in the bank
				// TODO need to change image to Llama.gif
				objectLabels[counter].setAlignment(SWT.CENTER);
				objectLabels[counter].setImage(SWTResourceManager.getImage(MainWindow.class, "/pictures/Open.gif"));
				selectedObject[counter] = false;// Initially, none of the objects are selected
				objectLabels[counter].addMouseListener(new MouseAdapter()
				{
					public void mouseDown(MouseEvent e)
					{
						for (int k = 0; k < 32; k++)
						{
							if (e.widget == objectLabels[k])
							{
								objectLabels[k].drawBorder();// Add a border
								// Change Background
								Device device = Display.getCurrent();
								Color newColor = new Color(device, 200, 200, 200);
								objectLabels[k].setBackground(newColor);
								selectedObject[k] = true;// Set appropriate boolean to true
							}
							else
							{
								objectLabels[k].clearBorder();// Remove existing borders
								// Reset Background
								Device device = Display.getCurrent();
								Color newColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
								objectLabels[k].setBackground(newColor);
								selectedObject[k] = false;// Set all other booleans to false
							}
						}
					}
				});
				counter++;// Go to next llama
			}
		}
		
		Composite execTextArea = new Composite(execTabArea, SWT.NONE);
		execTextArea.setLayout(new GridLayout(1, false));
		GridData gd_execTextArea = new GridData(SWT.LEFT, SWT.CENTER, true,
				true, 1, 1);
		gd_execTextArea.heightHint = 156;
		gd_execTextArea.widthHint = 3000;
		execTextArea.setLayoutData(gd_execTextArea);
		formToolkit.adapt(execTextArea);
		formToolkit.paintBordersFor(execTextArea);
		
		txtOutput = new Text(execTextArea, SWT.BORDER | SWT.READ_ONLY | SWT.WRAP
				| SWT.V_SCROLL);
		GridData gd_txtOutput = new GridData(SWT.LEFT, SWT.TOP, true, true,
				1, 1);
		gd_txtOutput.widthHint = 3000;
		gd_txtOutput.heightHint = 116;
		txtOutput.setLayoutData(gd_txtOutput);
		formToolkit.adapt(txtOutput, true, true);
		
		commandLine = new Text(execTextArea, SWT.BORDER);
		GridData gd_commandLine = new GridData(SWT.FILL, SWT.FILL, true,
				false, 1, 1);
		gd_commandLine.widthHint = 1000;
		commandLine.setLayoutData(gd_commandLine);
		commandLine.addKeyListener(new KeyAdapter()
		{
			@Override
			public void keyPressed(KeyEvent e)
			{
				if (e.keyCode == 13)// Enter button
				{
					echo(commandLine.getText());// Echo input
					runCommand(commandLine.getText());
					commandLine.setText("");// Clear input area for new input
				}
			}
		});
		formToolkit.adapt(commandLine, true, true);
		
		Composite execButtonsAndList = new Composite(execTabArea, SWT.BORDER);
		GridLayout gl_execButtonsAndList = new GridLayout(1, false);
		gl_execButtonsAndList.marginHeight = 0;
		gl_execButtonsAndList.marginWidth = 0;
		execButtonsAndList.setLayout(gl_execButtonsAndList);
		GridData gd_execButtonsAndList = new GridData(SWT.RIGHT, SWT.CENTER, false,
				false, 1, 1);
		gd_execButtonsAndList.heightHint = 156;
		gd_execButtonsAndList.widthHint = 273;
		execButtonsAndList.setLayoutData(gd_execButtonsAndList);
		formToolkit.adapt(execButtonsAndList);
		formToolkit.paintBordersFor(execButtonsAndList);
		
		Composite execButtons = new Composite(execButtonsAndList, SWT.NONE);
		execButtons.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_execButtons = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_execButtons.widthHint = 273;
		execButtons.setLayoutData(gd_execButtons);
		formToolkit.adapt(execButtons);
		formToolkit.paintBordersFor(execButtons);
		
		Button btnAdd = new Button(execButtons, SWT.NONE);
		btnAdd.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				// Check to see which, if any, llama has been selected
				int selected = -1;// Assume no llama is selected
				for (int i = 0; i < 32; i++)
				{
					if (selectedObject[i])
					{
						selected = i;// Llama[i] is currently selected
					}
				}
				if (selected == -1)// If no llama is selected
				{
					// Let the user know that they must select a llama to add to the field
					MessageBox messageDialog = new MessageBox(getShell());
					messageDialog.setText("Error");
					messageDialog.setMessage("No object selected.");
					messageDialog.open();
				}
				else
				// A llama is selected
				{
					Llama newLlama = new Llama(display, 50, 50, 64, 64);// Create a copy of that llama on the field
					newLlama.setImage(objectLabels[selected].getImage());// Use the image of the selected llama
					final int spot = programObjects.size();// The index of the new llama in the ArrayList
					programObjects.add(newLlama);// Add copy to the ArrayList
					int i = 0;
					newLlama.name = "";
					do
					{
						if (!isTaken("Object" + (spot + i), false))
						{
							newLlama.name = "Object" + (spot + i); // Store name in Llama
						}
						i++;
					} while(newLlama.name.equals("")); // Keep trying higher numbers until you reach a name that isn't taken
					listObjects.add(newLlama.name); // Add a corresponding entry to the list
					Menu popupMenu = new Menu(programObjects.get(spot));// Create right-click menu for Field objects
					MenuItem removeItem = new MenuItem(popupMenu, SWT.NONE);
					removeItem.setText("Remove");
					removeItem.addSelectionListener(new SelectionAdapter()
					{
						public void widgetSelected(SelectionEvent e)
						{
							// Remove llama from field
							Llama toRemove = programObjects.get(spot);
							toRemove.dispose();
							listObjects.remove(toRemove.name);
						}
					});
					MenuItem renameItem = new MenuItem(popupMenu, SWT.NONE);
					renameItem.setText("Rename");
					renameItem.addSelectionListener(new SelectionAdapter()
					{
						public void widgetSelected(SelectionEvent e)
						{
							InputDialog input = new InputDialog(display.getShell(), "Rename Llama",
									"Type a new name for your llama, than press OK", "", null);
							input.open();
							String name = input.getValue();
							if (name != null && !isTaken(name, true))
							{
								listObjects.setItem(listObjects.indexOf(programObjects.get(spot).name), name);
								programObjects.get(spot).name = name;
							}
						}
					});
					// TODO Add more to the right click menu
					programObjects.get(spot).setMenu(popupMenu);// Associate menu with the object
					programObjects.get(spot).addDragDetectListener(new DragDetectListener()
					{
						public void dragDetected(DragDetectEvent arg0)
						{
							objectBeingDragged = spot;// Drag capability
						}
					});
					programObjects.get(spot).addMouseMoveListener(new MouseMoveListener()
					{
						public void mouseMove(MouseEvent arg0)
						{
							int mouseX = arg0.x;
							int mouseY = arg0.y;
							int objectX = ((Llama) arg0.widget).x;
							int objectY = ((Llama) arg0.widget).y;
							if (spot == objectBeingDragged && !outOfBounds(mouseX + objectX, mouseY + objectY))
							{
								// Have object follow mouse while being dragged
								//((Llama) arg0.widget).setBounds(mouseX + objectX - 32, mouseY + objectY - 32, 64, 64);
								((Llama) arg0.widget).x = mouseX + objectX;
								((Llama) arg0.widget).y = mouseY + objectY;
								((Llama) arg0.widget).refreshBounds();
							}
						}
						
						private boolean outOfBounds(int X, int Y)// Don't leave the playing field
						{
							Point size = display.getSize();// Get size of field
							if (X >= size.x/* right */|| Y >= size.y/* bottom */|| X < 0/* left */|| Y < 0/* top */)
							{
								return true;
							}
							return false;
						}
					});
					programObjects.get(spot).addMouseListener(new MouseAdapter()
					{
						public void mouseUp(MouseEvent e)
						{
							if (spot == objectBeingDragged)
							{
								objectBeingDragged = -1;// Release object from mouse
							}
						}
					});
				}
			}
		});
		formToolkit.adapt(btnAdd, true, true);
		btnAdd.setText("Add");
		
		Button btnEdit = new Button(execButtons, SWT.NONE);
		formToolkit.adapt(btnEdit, true, true);
		btnEdit.setText("Edit");
		
		Button btnSave = new Button(execButtons, SWT.NONE);
		formToolkit.adapt(btnSave, true, true);
		btnSave.setText("Save");
		
		Button btnLoad = new Button(execButtons, SWT.NONE);
		formToolkit.adapt(btnLoad, true, true);
		btnLoad.setText("Load");
		
		listObjects = new List(execButtonsAndList, SWT.BORDER | SWT.V_SCROLL);
		listObjects.addMouseListener(new MouseAdapter() {
			public void mouseDoubleClick(MouseEvent e) {
				int selectedItem = listObjects.getSelectionIndex();
				if (selectedItem != -1)
				commandLine.append(listObjects.getItems()[selectedItem] + ".");
			}
		});
		GridData gd_listObjects = new GridData(SWT.LEFT, SWT.CENTER, false, true, 1, 1);
		gd_listObjects.heightHint = 116;
		gd_listObjects.widthHint = 249;
		listObjects.setLayoutData(gd_listObjects);
		formToolkit.adapt(listObjects, true, true);
		
		return container;
	}

	/**
	 * Launch the application.
	 * 
	 * @param args
	 */
	public static void main(String args[])
	{
		try
		{
			MainWindow window = new MainWindow();// Create an instance of this window
			window.setBlockOnOpen(true);// Once we have opened the window, chill and wait for user input
			window.open();// Make the window visible to the user
			Display.getCurrent().dispose();// Once the user is done (Hits the close button), clear up the resorces associated with this window
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * Configure the shell.
	 * 
	 * @param newShell
	 */
	@Override
	protected void configureShell(Shell newShell)
	{
		newShell.setMinimumSize(new Point(700, 500));// Window can't be smaller than this
		newShell.setImage(SWTResourceManager
				.getImage("C:\\Users\\Connor\\Pictures\\Logo.png"));// TODO Change logo to llama
		super.configureShell(newShell);
		newShell.setText("KodeLlama");// Name the Window
	}
	
	/**
	 * Return the initial size of the window.
	 */
	@Override
	protected Point getInitialSize()
	{
		return new Point(700, 500);// Start at minimum size for smaller screens
	}
	
	/**
	 * Create a new project
	 */
	protected void newProject()
	{
		// Make sure the user saves if they want to
		MessageBox exit = new MessageBox(getShell(), SWT.ICON_QUESTION
				| SWT.YES | SWT.NO | SWT.CANCEL);
		exit.setText("Confirm Exit");
		exit.setMessage("Are you sure you want to close this project without saving?");
		int response = exit.open();
		
		if (response == SWT.CANCEL)
		{
			return;// Don't close the project
		}
		else if (response == SWT.NO)
		{
			saveProject();// Save the project then close the project
		}
		
		// "Close" the project. Basically, just reinitialize everything to its default value
		txtOutput.setText("");
		commandLine.setText("");
		codeBox.setText("");
		for (int i = 0; i < programObjects.size(); i++)
		{
			programObjects.get(i).dispose();// remove objects from the field
		}
	}
	
	/**
	 * Save the current project
	 */
	private void saveProject()
	{
		FileDialog fd = new FileDialog(getShell(), SWT.SAVE);
		fd.setText("Save Project");
		fd.setFilterExtensions(new String[]
			{ "*.pgm" });
		String homefolder = System.getProperty("user.home");
		fd.setFilterPath(homefolder);
		fd.setOverwrite(true);
		String fileName = fd.open();
		
		if (fileName == null)// User cancelled or closed the File Dialog
		{
			return;
		}
		
		try
		{
			File file = new File(fileName);// Open a file with that name
			FileWriter write = new FileWriter(file);// Open a reader of that file
			
			String data = "hey this works";// TODO formulate data of project into string
			
			write.write(data);// Writes data into file
			
			write.close();// Close reader
		}
		catch (Exception e) // Most likely, filename is invalid
		{
			// Let the user know possible ways to fix the error
			MessageBox error = new MessageBox(getShell(), SWT.OK);
			error.setText("File Error");
			error.setMessage("Error opening file. Please make sure the file " +
					"is not open in another program");
			error.open();
		}
	}
	
	/**
	 * Open a project from the disk
	 */
	public void loadProject()
	{
		// Opens a file dialog for .pgm files in the user's home directory and ask the user to select a file
		FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
		fd.setFilterExtensions(new String[]
			{ "*.pgm" });
		fd.setText("Open Project");
		String homefolder = System.getProperty("user.home");
		fd.setFilterPath(homefolder);
		String fileName = fd.open();
		
		if (fileName == null)// User cancelled or closed the File Dialog
		{
			return;
		}
		
		try
		{
			File file = new File(fileName);// Open a file with that name
			FileReader read = new FileReader(file);// Open a reader of that file
			
			String contents = "";
			while (read.ready())
			{
				int nchar = read.read();
				contents += Character.toString((char) nchar);// Read contents of file into string
			}
			
			// TODO Analyze contents and load up appropriate values (could be done in reading loop or here in separate loop
			System.out.println("Contents: " + contents);
			
			read.close();// Close reader
		}
		catch (Exception e) // Most likely, file does not exist
		{
			// Let the user know possible ways to fix the error
			MessageBox error = new MessageBox(getShell(), SWT.OK);
			error.setText("File Error");
			error.setMessage("Error opening file. Please make sure the file exists and " +
					"is not open in another program");
			error.open();
			loadProject();// Reopen file dialog
		}
	}
	
	/**
	 * Run the current project
	 */
	public void runProject()
	{
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * Stop any running project
	 */
	public void stopProject()
	{
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * print something to the text output
	 */
	private void echo(String n)
	{
		txtOutput.append(n + "\n");
	}

	/**
	 * Check to see if a name is taken
	 */
	private boolean isTaken(String name, boolean verbal)
	{
		boolean isValid = true;
		for (int i = 0; i < programObjects.size(); i++)
		{
			if (programObjects.get(i).name.equals(name) && !programObjects.get(i).isDisposed())
			{
				// A non-disposed object is already using that name
				isValid = false;
				if (verbal)// We only display an error message some of the times
				{
					MessageBox error = new MessageBox(this.getShell());
					error.setText("Naming Error");
					error.setMessage("Error: That name has already been taken by another object");
					error.open();
				}
				break;
			}
		}
		return !isValid;
	}
	
	/**
	 * Send a command to the interpreter to be run
	 */
	protected void runCommand(String text)
	{
		int index = -1;
		String object = text.substring(0, text.indexOf('.'));
		// Find the index of the object in the ArrayList
		for (int i = 0; i < programObjects.size(); i++)
		{
			if(programObjects.get(i).name.equals(object) && !programObjects.get(i).isDisposed())
			{
				index = i;
				break;
			}
		}
		
		if (index != -1)
		{
			echo(interpreter.runCommand(commandLine.getText(), programObjects.get(index)));// Send command to interpreter
		}
		else
		{
			echo("No such object");// No object
		}
	}
}
