// import java.awt.event.MouseMotionListener;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.window.ApplicationWindow;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.ImageLoader;
import org.eclipse.swt.graphics.LineAttributes;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.ColorDialog;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.events.DragDetectEvent;
import org.eclipse.swt.events.DragDetectListener;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseMoveListener;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.layout.FillLayout;

public class MainWindow extends ApplicationWindow implements
		MouseMoveListener
{
	private final FormToolkit formToolkit = new FormToolkit(
			Display.getDefault()); // I have no idea what this does. It was autogenerated. Don't delete it.
	
	private Text codeBox; // The textbox containing the code
	private Text txtOutput; // The textbox outputting commands and info from the project
	private Text commandLine; // The textbox for entering commands
	Composite display;// The playing field for llamas
	
	private boolean runnable; // Can we run the current project? (Is the
								// Execution Tab open?)
	int objectBeingDragged; // The object we are moving around the display
	ArrayList<Llama> programObjects; // The objects in the program
	boolean[] selectedObject; // The objects currently selected
	Llama[] objectLabels; // The objects in the llamaBank
	List listObjects; // The list of objects in play on the field
	Browser browser; // The help browser
	String homeURL = this.getClass().getResource("/helpHome.htm").toString(); // The url for the home file
	// Image defaultLlama = SWTResourceManager.getImage(MainWindow.class,
	// "/pictures/Llama.gif"); // The default llama image
	Display d;
	Image defaultLlama;
	ArrayList<Line> lines = new ArrayList<Line>(); // The lines drawn on the field by llamas
	ArrayList<Llama> frozenLlamas = new ArrayList<Llama>(); // The llamas on the field that are frozen
	ArrayList<Line> frozenLines = new ArrayList<Line>(); // The lines on the field that are frozen
	boolean frozen = false; // Whether or not there is a frozen background
	static MainWindow window;
	boolean clear = false;
	Image oldImage;
	
	private int mx, my;
	
	/**
	 * Create the application window.
	 */
	public MainWindow()
	{
		super(null);
		runnable = true;// We start in the Code tab, so we can't run anything
		objectBeingDragged = -1;// No objects are selected from the Llamabank
		programObjects = new ArrayList<Llama>(0);// Initialize the list of objects currently in playing
		String resource = "pictures/Llama.gif";// location of defaultLlama image
		URL url = Thread.currentThread().getContextClassLoader().getResource(resource);
		if (url == null)
		{
			throw new RuntimeException("Cannot find resource on classpath: '" + resource + "'");
		}
		String file = url.getFile();// absolute path of defaultLlama
		d = Display.getDefault();// Baz's Solution
		defaultLlama = new Image(d, file);// Baz's Solution
	}
	
	/**
	 * Create contents of the application window.
	 * 
	 * @param parent
	 */
	@Override
	protected Control createContents(Composite parent)
	{
		// Begin auto-generated code from Design tab
		setStatus("");
		Composite container = new Composite(parent, SWT.NONE);
		
		container.setLayout(new GridLayout(1, false));
		
		Composite toolbar = new Composite(container, SWT.NONE);
		toolbar.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_toolbar = new GridData(SWT.LEFT, SWT.CENTER, true, false,
				1, 1);
		gd_toolbar.widthHint = 3000;
		toolbar.setLayoutData(gd_toolbar);
		
		Button newBtn = new Button(toolbar, SWT.NONE);
		newBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				newProject();// Open a new project (see lines at bottom of class)
			}
		});
		newBtn.setText("New");
		newBtn.setToolTipText("New");
		newBtn.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/pictures/New.gif"));
		
		Button saveBtn = new Button(toolbar, SWT.NONE);
		saveBtn.setText("Save");
		saveBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				saveProject();// Save project (see lines at bottom of class)
			}
		});
		saveBtn.setToolTipText("Save");
		saveBtn.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/pictures/Save.gif"));
		
		Button openBtn = new Button(toolbar, SWT.NONE);
		openBtn.setText("Open");
		openBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				if (newProject())// Remove current project (see lines at bottom of class)
				{
					loadProject();// Load project (see lines at bottom of class)
				}
			}
		});
		openBtn.setToolTipText("Load");
		openBtn.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/pictures/Open.gif"));
		
		Button runBtn = new Button(toolbar, SWT.NONE);
		runBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				if (runnable)// Test to see if we are in the Execution Tab
				{
					System.gc();
					runProject();// Run project (see lines at bottom of class)
				}
				else
				// We are in the code tab
				{
					// Notify the user why we can't run the program
					MessageBox error = new MessageBox(getShell());
					error.setMessage("Please open the Execution Tab before running your project");
					error.open();
				}
			}
		});
		runBtn.setText("Run");
		runBtn.setToolTipText("Run");
		runBtn.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/pictures/Play.gif"));
		
		Button stopBtn = new Button(toolbar, SWT.NONE);
		stopBtn.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				if (runnable)// Are we in Execution Tab
				{
					stopProject();// Stop Project
				}
			}
		});
		stopBtn.setText("Stop");
		stopBtn.setToolTipText("Stop");
		stopBtn.setImage(SWTResourceManager.getImage(MainWindow.class,
				"/pictures/Halt.gif"));
		
		final TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				// If we are in Execution Tab, make runnable true
				runnable = (tabFolder.getSelectionIndex() == 1) ? true : false;
				if (!runnable)// If we change to Code tab
				{
					// stopProject();// Automatically stop the project
				}
			}
		});
		GridData gd_tabFolder = new GridData(SWT.LEFT, SWT.CENTER, true, true,
				1, 1);
		gd_tabFolder.heightHint = 2000;
		gd_tabFolder.widthHint = 3000;
		tabFolder.setLayoutData(gd_tabFolder);
		
		TabItem codingTab = new TabItem(tabFolder, SWT.NONE);
		codingTab.setText("Code");
		
		Composite codeTabArea = new Composite(tabFolder, SWT.NONE);
		codingTab.setControl(codeTabArea);
		formToolkit.paintBordersFor(codeTabArea);
		codeTabArea.setLayout(new GridLayout(2, false));
		
		codeBox = new Text(codeTabArea, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL
				| SWT.MULTI);
		GridData gd_codeBox = new GridData(SWT.LEFT, SWT.TOP, true, true, 1, 1);
		gd_codeBox.heightHint = 2000;
		gd_codeBox.widthHint = 3000;
		codeBox.setLayoutData(gd_codeBox);
		formToolkit.adapt(codeBox, true, true);
		
		Composite browserArea = new Composite(codeTabArea, SWT.NONE);
		browserArea.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false,
				true, 1, 1));
		formToolkit.adapt(browserArea);
		formToolkit.paintBordersFor(browserArea);
		GridLayout gl_browserArea = new GridLayout(1, false);
		gl_browserArea.marginWidth = 0;
		gl_browserArea.marginHeight = 0;
		browserArea.setLayout(gl_browserArea);
		
		Composite navButtons = new Composite(browserArea, SWT.NONE);
		navButtons.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_navButtons = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_navButtons.widthHint = 250;
		navButtons.setLayoutData(gd_navButtons);
		formToolkit.adapt(navButtons);
		formToolkit.paintBordersFor(navButtons);
		
		Button btnBack = new Button(navButtons, SWT.NONE);
		btnBack.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				browser.back(); // Go back to the last viewed page
			}
		});
		formToolkit.adapt(btnBack, true, true);
		btnBack.setText("Back");
		
		Button btnHome = new Button(navButtons, SWT.NONE);
		btnHome.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				browser.setUrl(homeURL); // Go to the home page
			}
		});
		formToolkit.adapt(btnHome, true, true);
		btnHome.setText("Home");
		
		Button btnForward = new Button(navButtons, SWT.NONE);
		btnForward.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				browser.forward(); // Go to the page we just "backed" out of
			}
		});
		formToolkit.adapt(btnForward, true, true);
		btnForward.setText("Forward");
		browser = new Browser(browserArea, SWT.BORDER);
		GridData gd_browser = new GridData(SWT.LEFT, SWT.CENTER, false, true,
				1, 1);
		gd_browser.widthHint = 250;
		gd_browser.heightHint = 2000;
		browser.setLayoutData(gd_browser);
		browser.setUrl(homeURL);
		formToolkit.adapt(browser);
		formToolkit.paintBordersFor(browser);
		
		TabItem execTab = new TabItem(tabFolder, SWT.NONE);
		execTab.setText("Execution");
		
		Composite execTabArea = formToolkit
				.createComposite(tabFolder, SWT.NONE);
		execTab.setControl(execTabArea);
		formToolkit.paintBordersFor(execTabArea);
		execTabArea.setLayout(new GridLayout(2, false));
		tabFolder.setSelection(1);
		
		display = new Composite(execTabArea, SWT.BORDER);
		display.addMouseMoveListener(this);
		display.addPaintListener(new PaintListener()
		{
			public void paintControl(PaintEvent e)
			{
				if (oldImage == null)
				{
					oldImage = new Image(null, display.getSize().x * 2, display
							.getSize().y * 2);
				}
				else
				{
					if (display.getSize().x > oldImage.getBounds().width
							|| display.getSize().y > oldImage.getBounds().height)
					{
						Image bufferImage = oldImage;
						oldImage = new Image(null, display.getSize().x * 2, display
								.getSize().y * 2);
						GC copyGC = new GC(bufferImage);
						copyGC.copyArea(oldImage, 0, 0);
						copyGC.dispose();
						bufferImage.dispose();
					}
				}
				e.gc.drawImage(oldImage, 0, 0);
				GC gc = new GC(oldImage);
				for (Line l : lines) // For each line to be drawn on the field
				{
					gc.setForeground(l.getColor()); // Choose color based on
													// line
					gc.setLineAttributes(new LineAttributes(l.getWidth())); // Choose width based on line
					gc.drawLine(l.getX1(), l.getY1(), l.getX2(), l.getY2()); // Draw line
				}
				// Do lots of drawing onto the GC
				e.gc.drawImage(oldImage, 0, 0);
				// e.gc.copyArea(oldImage, 0, 0);
				lines.clear();
				gc.dispose();
			}
		});
		GridData gd_display = new GridData(SWT.LEFT, SWT.TOP, true, true, 1, 1);
		gd_display.heightHint = 2000;
		gd_display.widthHint = 3000;
		display.setLayoutData(gd_display);
		formToolkit.adapt(display);
		formToolkit.paintBordersFor(display);
		
		Composite llamaBank = new Composite(execTabArea, SWT.BORDER
				| SWT.V_SCROLL);
		GridData gd_llamaBank = new GridData(SWT.RIGHT, SWT.TOP, true, true, 1,
				1);
		gd_llamaBank.verticalIndent = 1;
		gd_llamaBank.widthHint = 273;
		gd_llamaBank.heightHint = 512;
		llamaBank.setLayoutData(gd_llamaBank);
		formToolkit.adapt(llamaBank);
		formToolkit.paintBordersFor(llamaBank);
		
		// Generate Llamas for Llama Bank
		objectLabels = new Llama[32];// Is really a 4x8 matrix of Llamas (extended Labels)
		// Each boolean in selectedObject corresponds to a llama. When the llama
		// is selected, the corresponding boolean becomes true
		selectedObject = new boolean[32];
		int counter = 0;// Iterates through each Llama as we make them
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				objectLabels[counter] = new Llama(llamaBank, 64 * i + 32,
						64 * j + 32, 64, 64);// Place the llamas in the bank
				objectLabels[counter].setImage(defaultLlama);// Use the default llama image for bank llamas
				selectedObject[counter] = false;// Initially, none of the objects are selected
				objectLabels[counter].addMouseListener(new MouseAdapter()
				{
					public void mouseDown(MouseEvent e)
					{
						if (e.button == 1)// Left mouse click
						{
							for (int k = 0; k < 32; k++)
							{
								if (e.widget == objectLabels[k])
								{
									objectLabels[k].drawBorder();// Add a border
									// Change Background
									// Device device = Display.getCurrent();
									// Color newColor = new Color(device, 200,
									// 200, 200);
									// objectLabels[k].setBackground(newColor);
									selectedObject[k] = true;// Set appropriate boolean to true
								}
								else
								{
									objectLabels[k].clearBorder();// Remove existing borders
									// Reset Background
									// Device device = Display.getCurrent();
									// Color newColor =
									// device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
									// objectLabels[k].setBackground(newColor);
									selectedObject[k] = false;// Set all other booleans to false
								}
							}
						}
					}
				});
				counter++;// Go to next llama
			}
		}
		
		Composite execTextArea = new Composite(execTabArea, SWT.NONE);
		execTextArea.setLayout(new GridLayout(1, false));
		GridData gd_execTextArea = new GridData(SWT.LEFT, SWT.CENTER, true,
				true, 1, 1);
		gd_execTextArea.heightHint = 156;
		gd_execTextArea.widthHint = 3000;
		execTextArea.setLayoutData(gd_execTextArea);
		formToolkit.adapt(execTextArea);
		formToolkit.paintBordersFor(execTextArea);
		
		txtOutput = new Text(execTextArea, SWT.BORDER | SWT.READ_ONLY
				| SWT.WRAP | SWT.V_SCROLL);
		GridData gd_txtOutput = new GridData(SWT.LEFT, SWT.TOP, true, true, 1,
				1);
		gd_txtOutput.widthHint = 3000;
		gd_txtOutput.heightHint = 116;
		txtOutput.setLayoutData(gd_txtOutput);
		formToolkit.adapt(txtOutput, true, true);
		
		commandLine = new Text(execTextArea, SWT.BORDER);
		GridData gd_commandLine = new GridData(SWT.FILL, SWT.FILL, true, false,
				1, 1);
		gd_commandLine.widthHint = 1000;
		commandLine.setLayoutData(gd_commandLine);
		commandLine.addKeyListener(new KeyAdapter()
		{
			@Override
			public void keyPressed(KeyEvent e)
			{
				if (e.keyCode == 13)// Enter button
				{
					echo(commandLine.getText());// Echo input
					interpretCommand(commandLine.getText());
					commandLine.setText("");// Clear input area for new input
				}
			}
		});
		formToolkit.adapt(commandLine, true, true);
		
		Composite execButtonsAndList = new Composite(execTabArea, SWT.BORDER);
		GridLayout gl_execButtonsAndList = new GridLayout(1, false);
		gl_execButtonsAndList.marginHeight = 0;
		gl_execButtonsAndList.marginWidth = 0;
		execButtonsAndList.setLayout(gl_execButtonsAndList);
		GridData gd_execButtonsAndList = new GridData(SWT.RIGHT, SWT.CENTER,
				false, false, 1, 1);
		gd_execButtonsAndList.heightHint = 156;
		gd_execButtonsAndList.widthHint = 273;
		execButtonsAndList.setLayoutData(gd_execButtonsAndList);
		formToolkit.adapt(execButtonsAndList);
		formToolkit.paintBordersFor(execButtonsAndList);
		
		Composite execButtons = new Composite(execButtonsAndList, SWT.NONE);
		execButtons.setLayout(new FillLayout(SWT.HORIZONTAL));
		GridData gd_execButtons = new GridData(SWT.LEFT, SWT.CENTER, false,
				false, 1, 1);
		gd_execButtons.widthHint = 273;
		execButtons.setLayoutData(gd_execButtons);
		formToolkit.adapt(execButtons);
		formToolkit.paintBordersFor(execButtons);
		
		Button btnAdd = new Button(execButtons, SWT.NONE);
		btnAdd.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				int bankLlama = checkBank();
				// A llama is selected
				if (bankLlama != -1)
				{
					Llama newLlama = new Llama(display, 50, 50, 91, 91);// Create a copy of that llama on the field
					newLlama.setImage(objectLabels[bankLlama].getImage());
					newFieldLlama(newLlama);// Add llama to playing field
				}
			}
		});
		formToolkit.adapt(btnAdd, true, true);
		btnAdd.setText("Add");
		
		Button btnEdit = new Button(execButtons, SWT.NONE);
		formToolkit.adapt(btnEdit, true, true);
		btnEdit.setText("Edit");
		
		Button btnSave = new Button(execButtons, SWT.NONE);
		btnSave.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				int llamaBank = checkBank();
				// A llama is selected
				if (llamaBank != -1)
				{
					FileDialog fd = new FileDialog(getShell(), SWT.SAVE);
					fd.setText("Save Image");
					fd.setFilterExtensions(new String[]
						{ "*.png" });
					String homefolder = System.getProperty("user.home");
					fd.setFilterPath(homefolder);
					fd.setOverwrite(true);
					String fileName = fd.open();
					if (fileName == null)
					{
						return;
					}
					Image toSave = objectLabels[llamaBank].getImage();
					/*
					 * ImageLoader saver = new ImageLoader(); ImageData data = toSave.getImageData(); objectLabels[llamaBank].setImage(new
					 * Image(display.getDisplay(), data)); saver.data = new ImageData[] { data }; saver.save(fileName, SWT.IMAGE_BMP);
					 */
					ImageLoader saver = new ImageLoader();
					saver.data = new ImageData[]
						{ toSave.getImageData() };
					saver.save(fileName, SWT.IMAGE_PNG);
				}
			}
		});
		formToolkit.adapt(btnSave, true, true);
		btnSave.setText("Save");
		
		Button btnLoad = new Button(execButtons, SWT.NONE);
		btnLoad.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				int llamaBank = checkBank();
				// A llama is selected
				if (llamaBank != -1)
				{
					FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
					fd.setText("Load Image");
					fd.setFilterExtensions(new String[]
						{ "*.png", "*.gif", "*.bmp", });
					String homefolder = System.getProperty("user.home");
					fd.setFilterPath(homefolder);
					String fileName = fd.open();
					if (fileName == null)
					{
						return;
					}
					ImageLoader loader = new ImageLoader();
					ImageData[] data = loader.load(fileName);
					System.out.println(data[0].getTransparencyType());
					objectLabels[llamaBank].setImage(new Image(display.getDisplay(), data[0]));
					objectLabels[llamaBank].redraw();
				}
			}
		});
		formToolkit.adapt(btnLoad, true, true);
		btnLoad.setText("Load");
		
		listObjects = new List(execButtonsAndList, SWT.BORDER | SWT.V_SCROLL);
		listObjects.addMouseListener(new MouseAdapter()
		{
			public void mouseDown(MouseEvent e)
			{
				if (e.button == 3)// Right mouse click
				{
					int selectedItem = listObjects.getSelectionIndex();
					if (selectedItem != -1)// A list item is selected
					{
						for (Llama l : programObjects)// Find matching llama
						{
							if (l.name.equals(listObjects.getItem(selectedItem))
									&& !l.isDisposed())
							{
								Event event = new Event();
								event.button = 3;// right mouse click
								l.notifyListeners(SWT.MouseDown, event);// Pretend
																		// the
																		// user
																		// right-clicked
																		// the
																		// llama
							}
						}
					}
				}
			}
			
			public void mouseDoubleClick(MouseEvent e)
			{
				if (e.button == 1)// left mouse cliick
				{
					int selectedItem = listObjects.getSelectionIndex();
					if (selectedItem != -1)// A list item is selected
					{
						commandLine.append(listObjects.getItems()[selectedItem]
								+ ".");
						commandLine.setFocus();// Place cursor in commandLine
					}
				}
			}
		});
		GridData gd_listObjects = new GridData(SWT.LEFT, SWT.CENTER, false,
				true, 1, 1);
		gd_listObjects.heightHint = 116;
		gd_listObjects.widthHint = 249;
		listObjects.setLayoutData(gd_listObjects);
		formToolkit.adapt(listObjects, true, true);
		
		return container;
	}
	
	/**
	 * Launch the application.
	 * 
	 * @param args
	 */
	public static void main(String args[])
	{
		try
		{
			window = new MainWindow();// Create an instance of this window
			window.setBlockOnOpen(true);// Once we have opened the window, chill
										// and wait for user input
			window.open();// Make the window visible to the user
			Display.getCurrent().dispose();// Once the user is done (Hits the
											// close button), clear up the
											// resorces associated with this
											// window
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * Configure the shell.
	 * 
	 * @param newShell
	 */
	@Override
	protected void configureShell(Shell newShell)
	{
		newShell.setMinimumSize(new Point(700, 500));// Window can't be smaller
														// than this
		newShell.setImage(SWTResourceManager.getImage(getClass(),
				"/pictures/Llama.gif"));
		super.configureShell(newShell);
		newShell.setText("KodeLlama");// Name the Window
	}
	
	/**
	 * Return the initial size of the window.
	 */
	@Override
	protected Point getInitialSize()
	{
		return new Point(700, 500);// Start at minimum size for smaller screens
	}
	
	/**
	 * Create a new project
	 */
	protected boolean newProject()
	{
		// Make sure the user saves if they want to
		MessageBox exit = new MessageBox(getShell(), SWT.ICON_QUESTION
				| SWT.YES | SWT.NO | SWT.CANCEL);
		exit.setText("Confirm Exit");
		exit.setMessage("Are you sure you want to close this project without saving?");
		int response = exit.open();
		
		if (response == SWT.CANCEL)
		{
			return false;// Don't close the project
		}
		else if (response == SWT.NO)
		{
			boolean saved = saveProject();// Save the project then close the
											// project
			if (!saved)// The user cancelled the save
			{
				return false;// Don't close the project
			}
		}
		
		// "Close" the project. Basically, just reinitialize everything to its
		// default value
		txtOutput.setText("");
		commandLine.setText("");
		codeBox.setText("");
		listObjects.removeAll();
		lines = new ArrayList<Line>();
		oldImage = new Image(display.getDisplay(), display.getSize().x,
				display.getSize().y);
		for (int i = 0; i < programObjects.size(); i++)
		{
			programObjects.get(i).dispose();// remove objects from the field
		}
		programObjects = new ArrayList<Llama>();
		display.redraw();
		return true;
	}
	
	/**
	 * Save the current project
	 */
	private boolean saveProject()
	{
		FileDialog fd = new FileDialog(getShell(), SWT.SAVE);
		fd.setText("Save Project");
		fd.setFilterExtensions(new String[]
			{ "*.kdl" });
		String homefolder = System.getProperty("user.home");
		fd.setFilterPath(homefolder);
		fd.setOverwrite(true);
		String fileName = fd.open();
		
		if (fileName == null)// User cancelled or closed the File Dialog
		{
			return false;
		}
		
		try
		{
			final ZipOutputStream zipper = new ZipOutputStream(new FileOutputStream(new File (fileName)));
			ZipEntry e = new ZipEntry("base");
			zipper.putNextEntry(e);
			ObjectOutputStream out = new ObjectOutputStream(zipper);// Open a
																	// stream
																	// for
																	// objects
			
			int numLlamas = programObjects.size();
			for (Llama llama : programObjects)
			{
				if (llama.isDisposed())
					numLlamas--;
			}
			
			out.writeInt(numLlamas);// Used to know how many llamas
									// to read out of file
			
			for (Llama llama : programObjects)
			{
				if (!llama.isDisposed())
					out.writeObject(llama.Data());// write data associated with each llama
			}
			
			zipper.write(codeBox.getText().length());
			zipper.write(codeBox.getText().getBytes(),0,codeBox.getText().length());// Because code is kind of
												// important
			zipper.closeEntry();
			
			e = new ZipEntry("display.png");
			zipper.putNextEntry(e);
			ImageData[] toSave = new ImageData[numLlamas + 1];
			ImageLoader saver = new ImageLoader();// Used to save Llama images and Display
			toSave[0] = oldImage.getImageData();
			saver.data = toSave;
			saver.save(zipper, SWT.IMAGE_PNG);
			zipper.closeEntry();
			
			for (int i = 0; i < programObjects.size(); i++)
			{
				Llama llama = programObjects.get(i);
				if (!llama.isDisposed())
				{
					e = new ZipEntry("image" + i + ".png");
					zipper.putNextEntry(e);
					toSave[0] = llama.getImage().getImageData();
					saver.data = toSave;
					saver.save(zipper, SWT.IMAGE_PNG);
					e = new ZipEntry("image" + i);
					zipper.closeEntry();
				}
			}
			
			zipper.close();// Close zipper
		}
		catch (Exception e) // Most likely, filename is invalid
		{
			e.printStackTrace();
			System.err.println(e.getMessage());
			// Let the user know possible ways to fix the error
			MessageBox error = new MessageBox(getShell(), SWT.OK);
			error.setText("File Error");
			error.setMessage("Error opening file. Please make sure the file "
					+ "is not open in another program");
			error.open();
		}
		return true;
	}
	
	/**
	 * Open a project from the disk
	 */
	public void loadProject()
	{
		// Opens a file dialog for .pgm files in the user's home directory and
		// ask the user to select a file
		FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
		fd.setFilterExtensions(new String[]
			{ "*.kdl" });
		fd.setText("Open Project");
		String homefolder = System.getProperty("user.home");
		fd.setFilterPath(homefolder);
		String fileName = fd.open();
		
		if (fileName == null)// User cancelled or closed the File Dialog
		{
			return;
		}
		
		try
		{
			// Open archive
			final ZipInputStream zipper = new ZipInputStream(new FileInputStream(new File (fileName)));
			ZipEntry e = zipper.getNextEntry();// Get file from archive
			ObjectInputStream in = new ObjectInputStream(zipper);// Open a stream to read file
			
			int progSize = in.readInt();// How many llamas are there?
			
			LlamaData[] llamas = new LlamaData[progSize];
			for (int i = 0; i < progSize; i++)
			{
				// Instantiate llama based on saved data
				llamas[i] = (LlamaData) in.readObject();
			}
			String code = "";
			int codeSize = zipper.read();
			System.out.println(codeSize);
			for (int i = 0; i < codeSize; i++)
			{
				code += (char) zipper.read();// yay appending!
			}
			System.out.println(code);
			codeBox.setText(code);
			zipper.closeEntry();
			
			e = zipper.getNextEntry();// Get file from archive
			System.out.println(e.getName());
			
			ImageLoader loader = new ImageLoader();
			//byte [] buf = new byte[zipper.available()];
			//zipper.read(buf, 0, zipper.available());
			//System.out.println(buf[0] + " " + buf[1] + " " + buf[2]);
			//ByteArrayInputStream bais = new ByteArrayInputStream(buf);
			//System.out.println(new String(buf));
			ImageData[] images = loader.load(zipper);
			oldImage = new Image(null, images[0]);
			zipper.closeEntry();
			
			int counter = 0;
			while ((e = zipper.getNextEntry()) != null)
			{
				loader = new ImageLoader();
				images = loader.load(zipper);
				Llama llama = new Llama(llamas[counter], display, new Image(null, images[0]));
				newFieldLlama(llama);
				counter++;
			}
			
			zipper.close();// Close archive
		}
		catch (Exception e) // Most likely, file does not exist
		{
			e.printStackTrace();
			System.err.println(e.getMessage());
			// Let the user know possible ways to fix the error
			MessageBox error = new MessageBox(getShell(), SWT.OK);
			error.setText("File Error");
			error.setMessage("Error opening file. Please make sure the file exists and "
					+ "is not open in another program");
			error.open();
			System.err.println(e.getMessage());
			loadProject();// Reopen file dialog
		}
	}
	
	public TreeMap<String, Llama> getLlamas()
	{
		TreeMap<String, Llama> objects = new TreeMap<String, Llama>();
		for (Llama l1 : programObjects)
		{
			objects.put(l1.name, l1);
		}
		return objects;
	}
	
	/**
	 * Run the current project
	 */
	Interpreter interpreterGlobal;
	Thread th = new Thread();
	
	public void runProject()
	{
		Interpreter interpreter = new Interpreter(codeBox.getText(),
				programObjects, window, true);
		interpreterGlobal = interpreter;
		th.interrupt();
		th = new Thread(interpreterGlobal);
		th.start();
	}
	
	/**
	 * Stop any running project
	 */
	public void stopProject()
	{
		th.interrupt();
		// String array[] = { "stop" };
		// interpreterGlobal.interpret(array);
	}
	
	/**
	 * Print something to the text output
	 */
	private void echo(String n)
	{
		txtOutput.append(n + "\n");// Basically, our version of
									// System.out.println(n);
	}
	
	/**
	 * Check to see if a name is taken
	 */
	private boolean isTaken(String name, boolean verbal)
	{
		boolean isValid = true;
		for (int i = 0; i < programObjects.size(); i++)
		{
			if (programObjects.get(i).name.equals(name)
					&& !programObjects.get(i).isDisposed())
			{
				// A non-disposed object is already using that name
				isValid = false;
				if (verbal)// We only display an error message some of the times
				{
					MessageBox error = new MessageBox(this.getShell(),
							SWT.ERROR);
					error.setText("Naming Error");
					error.setMessage("Error: That name has already been taken by another object");
					error.open();
				}
				break;
			}
		}
		return !isValid;
	}
	
	/**
	 * Send a command to the interpreter to be run
	 */
	protected void interpretCommand(String text)
	{
		Interpreter i = new Interpreter(codeBox.getText(), programObjects,
				window, false);
		interpreterGlobal = i;
		String args[] = new String[1];
		args[0] = text;
		th.interrupt();
		interpreterGlobal.passArgs(args);
		th = new Thread(interpreterGlobal);
		th.start();
	}
	
	/*
	 * protected void interpretCommand(String text) { if (!text.contains("(")) { echo("Unrecognized Command");// Because parentheses are kind of important
	 * return; } if (text.substring(0, text.indexOf('(')).contains(".")) { int index = -1; String object = text.substring(0, text.indexOf('.')); // Find the
	 * index of the object in the ArrayList for (int i = 0; i < programObjects.size(); i++) { if (programObjects.get(i).name.equals(object) &&
	 * !programObjects.get(i).isDisposed()) { index = i; break; } }
	 * 
	 * if (index != -1) { echo(runCommand(commandLine.getText(), programObjects.get(index)));// Send command to interpreter } else { echo("No such object");//
	 * No object } } else { echo(runCommand(commandLine.getText(), null)); } }
	 */
	/**
	 * Run a single command from the command line
	 */
	
	public String runCommand(String text, Llama llama)
	{
		String command = "";
		if (text.substring(0, text.indexOf('(')).contains("."))// Format of all
																// known valid
																// functions
		{
			command = "";
			String argument = "";
			// Separate command from object
			command = "";
			if (text.contains(" "))// Ignore anything after a space after the
									// command
			{
				command = text.substring(text.indexOf('.') + 1,
						text.indexOf(' '));
			}
			else
			{
				command = text.substring(text.indexOf('.') + 1, text.length());
			}
			if (command.contains("("))
			{
				if (command.contains(")"))// Separate argument from command
				{
					argument = command.substring(command.indexOf('(') + 1,
							command.indexOf(')'));
					command = command.substring(0, command.indexOf('('));
				}
			}
			command = command.toLowerCase();
			argument = argument.toLowerCase();
			if (argument.equals(""))
			{
				
				// back(int n) / bk(int n) done forward(int n) / fd(int n) done
				// distance(Llama n) done lt(int n) / leftTurn(int n) done
				// rt(int n) /
				// rightTurn(int n) done infront() done behind() done pd() /
				// penDown() done pu() / penUp() done position() / pos() done
				// remove() - Will not be
				// implemented; this should not be a method of the llama itself.
				
				if (command.equals("infront"))
				{
					for (Llama l : programObjects)
					{
						if (!l.isDisposed())
						{
							llama.moveAbove(l);// function of superclass
						}
					}
					return (llama.name + " has been placed in front.");
				}
				else if (command.equals("behind"))
				{
					for (Llama l : programObjects)
					{
						if (!l.isDisposed())
						{
							llama.moveBelow(l);// function of superclass
						}
					}
					return (llama.name + " has been placed behind.");
				}
				else if (command.equals("pd"))
				{
					llama.pd();
					return (llama.name + "'s pen is now down.");
				}
				else if (command.equals("pendown"))
				{
					llama.pd();
					return (llama.name + "'s pen is now down.");
				}
				else if (command.equals("pu"))
				{
					llama.pu();
					return (llama.name + "'s pen is now up.");
				}
				else if (command.equals("penup"))
				{
					llama.pu();
					return (llama.name + "'s pen is now up.");
				}
				else if (command.equals("position"))
				{
					Point objectPosition = llama.position();
					return (llama.name + "'s position is: " + objectPosition
							.toString());
				}
				else if (command.equals("pensize"))
				{
					return (llama.name + "'s penSize is: " + llama.penSize());
				}
				else if (command.equals("getx"))
				{
					Point objectPosition = llama.position();
					return (llama.name + "'s x-coordinate is: " + objectPosition.x);
				}
				else if (command.equals("gety"))
				{
					Point objectPosition = llama.position();
					return (llama.name + "'s y-coordinate is: " + objectPosition.y);
				}
			}
			else
			{
				int oldx = llama.x;
				int oldy = llama.y;
				if (command.equals("back"))
				{
					llama.back(Integer.parseInt(argument));
					if (llama.penDown)
					{
						Line line = new Line(llama.x, llama.y, oldx, oldy,
								llama.penSize, new Color(display.getDisplay(),
										llama.penColor));
						lines.add(line);
						display.redraw();
					}
					return (llama.name + " has been moved back " + argument + " pixels.");
				}
				else if (command.equals("bk"))
				{
					llama.back(Integer.parseInt(argument));
					if (llama.penDown)
					{
						Line line = new Line(llama.x, llama.y, oldx, oldy,
								llama.penSize, new Color(display.getDisplay(),
										llama.penColor));
						lines.add(line);
						display.redraw();
					}
					return (llama.name + " has been moved back " + argument + " pixels.");
				}
				else if (command.equals("forward"))
				{
					llama.forward(Integer.parseInt(argument));
					if (llama.penDown)
					{
						Line line = new Line(llama.x, llama.y, oldx, oldy,
								llama.penSize, new Color(display.getDisplay(),
										llama.penColor));
						lines.add(line);
						display.redraw();
					}
					return (llama.name + " has been moved forward " + argument + " pixels.");
				}
				else if (command.equals("fd"))
				{
					llama.forward(Integer.parseInt(argument));
					if (llama.penDown)
					{
						Line line = new Line(llama.x, llama.y, oldx, oldy,
								llama.penSize, new Color(display.getDisplay(),
										llama.penColor));
						lines.add(line);
						display.redraw();
					}
					return (llama.name + " has been moved forward " + argument + " pixels.");
				}
				else if (command.equals("distance"))
				{
					Llama a = llama;
					for (Llama l : programObjects)
					{
						if (l.name.equalsIgnoreCase(argument)
								&& !l.isDisposed())
						{
							a = l;
							break;
						}
					}
					int distance = (int) Math.sqrt(Math.pow((a.x - llama.x), 2)
							+ Math.pow((a.y - llama.y), 2));
					return (llama.name + " is " + distance + " pixels from " + a.name);
				}
				else if (command.equals("lt"))
				{
					llama.lt(Integer.parseInt(argument));
					return (llama.name + " has been turned left " + argument + " degrees.");
				}
				else if (command.equals("leftturn"))
				{
					llama.lt(Integer.parseInt(argument));
					return (llama.name + " has been turned left " + argument + " degrees.");
				}
				else if (command.equals("rt"))
				{
					llama.rt(Integer.parseInt(argument));
					return (llama.name + " has been turned right " + argument + " degrees.");
				}
				else if (command.equals("rightturn"))
				{
					llama.rt(Integer.parseInt(argument));
					return (llama.name + " has been turned right " + argument + " degrees.");
				}
				else if (command.equals("towards"))
				{
					Llama a = llama;
					for (Llama l : programObjects)
					{
						if (l.name.equalsIgnoreCase(argument)
								&& !l.isDisposed())
						{
							a = l;
							break;
						}
					}
					llama.towards(a);
					return (llama.name + " has been turned towards " + a.name);
				}
				else if (command.equals("resize"))
				{
					llama.resize(Integer.parseInt(argument));
					return (llama.name + "'s pen resized to " + argument);
				}
			}
		}
		else
		{
			command = text.substring(0, text.indexOf('('));
			String argument = text.substring(text.indexOf('(') + 1);
			int ignore = 0;
			int charIndex = argument.length() - 1;
			for (int i = 0; i < argument.length(); i++)
			{
				if (argument.charAt(i) == '(')
				{
					ignore++;
				}
				if (argument.charAt(i) == ')')
				{
					if (ignore == 0)
					{
						charIndex = i;
						break;
					}
					ignore--;
				}
			}
			argument = argument.substring(0, charIndex);
			if (!command.equals("announce") && !command.equals("question")
					&& !command.equals("show"))
			{
				argument = argument.replaceAll("[ )]", "");
			}
			// addLlama(Llama n) //Interpreter passes a llama to be added to the
			// screen.
			// show(String s) //Display in text box
			// Turtle.COMMANDS //All turtle commands
			// colorUnder(Llama n) //Very low priority
			// touching(Llama n, Llama m) //Return true or false
			// freezeBg() //Very low priority
			// unFreezeBg() //Very low priority
			// announce(String s) //Display message dialog.
			// question(String s) //Display yes/no dialog and return true if yes
			// and false if no.
			if (command.equals("addLlama"))
			{
				String[] args = argument.split(",");
				Llama arg = new Llama(display, Integer.parseInt(args[0]),
						Integer.parseInt(args[1]), 91, 91);
				newFieldLlama(arg); // add arg to field
				return (arg.name + " added to playing field");
			}
			else if (command.equals("show"))
			{
				echo(argument);
			}
			else if (command.equals("colorUnder"))
			{
				int index = -1;
				for (int i = 0; i < programObjects.size(); i++)
				{
					if (programObjects.get(i).name.equals(argument)
							&& !programObjects.get(i).isDisposed())
					{
						index = i;
						break;
					}
				}
				if (index == -1)
				{
					return (argument + " does not exist");
				}
				Llama arg1 = programObjects.get(index);
				for (int i = lines.size() - 1; i >= 0; i--)
				{
					if (lines.get(i).contains(arg1.position()))
					{
						return ("Color under " + argument + " is: ("
								+ lines.get(i).getR() + ", "
								+ lines.get(i).getG() + ", "
								+ lines.get(i).getB() + ")");
					}
				}
				return ("Color under " + argument + " is: ("
						+ display.getBackground().getRed() + ", "
						+ display.getBackground().getGreen() + ", "
						+ display.getBackground().getBlue() + ")");
			}
			else if (command.equals("touching"))
			{
				String[] args = argument.split(",");
				int index = -1;
				for (int i = 0; i < programObjects.size(); i++)
				{
					if (programObjects.get(i).name.equals(args[0])
							&& !programObjects.get(i).isDisposed())
					{
						index = i;
						break;
					}
				}
				if (index == -1)
				{
					return (args[0] + " does not exist");
				}
				Llama arg1 = programObjects.get(index);
				index = -1;
				for (int i = 0; i < programObjects.size(); i++)
				{
					if (programObjects.get(i).name.equals(args[1])
							&& !programObjects.get(i).isDisposed())
					{
						index = i;
						break;
					}
				}
				if (index == -1)
				{
					return (args[1] + " does not exist");
				}
				Llama arg2 = programObjects.get(index);
				Rectangle rect1 = new Rectangle(arg1.x, arg1.y, arg1.width,
						arg1.height);
				Rectangle rect2 = new Rectangle(arg2.x, arg2.y, arg2.width,
						arg2.height);
				if (rect1.intersects(rect2))
				{
					return "true";
				}
				else
				{
					return "false";
				}
			}
			else if (command.equals("freezeBg"))
			{
				// Store current state in variable
				frozenLines = new ArrayList<Line>();
				frozenLines.addAll(lines);
				frozen = true;
				return ("Background frozen");
			}
			else if (command.equals("unFreezeBg"))
			{
				// Clear variable
				frozenLines = new ArrayList<Line>();
				frozen = false;
				return ("Background unfrozen");
			}
			else if (command.equals("announce"))
			{
				String announceString = argument;
				MessageBox announceBox = new MessageBox(getShell(),
						SWT.ICON_INFORMATION | SWT.OK);
				announceBox.setText("Announcement");
				announceBox.setMessage(announceString);
				announceBox.open();
				return "";
			}
			else if (command.equals("question"))
			{
				String questionString = argument;
				MessageBox questionBox = new MessageBox(getShell(),
						SWT.ICON_QUESTION | SWT.YES | SWT.NO);
				questionBox.setText("Question");
				questionBox.setMessage(questionString);
				int response = questionBox.open();
				if (response == SWT.YES)
				{
					return "true";
				}
				else
				{
					return "false";
				}
			}
			else if (command.equals("clear"))
			{
				lines = new ArrayList<Line>();
				if (frozen)
				{
					lines.addAll(frozenLines);// Restore to stored state
				}
				oldImage = new Image(null, display.getSize().x,
						display.getSize().y);
				display.redraw();
				return ("Background cleared");
			}
		}
		return ("Command not recognized: " + command);
	}
	
	/**
	 * Run a single command from the interpreter
	 */
	Object returnObject;
	
	public void returner(Object o)
	{
		returnObject = o;
	}
	
	public Object execute(final String text, final Object[] args)
	{
		// That's right, we have two different functions to handle commands.
		// Why? For the glory of Satan, of course!
		Display.getDefault().syncExec(new Runnable()
		{
			public void run()
			{
				if (text.contains("."))
				{
					String object = text.substring(0, text.indexOf('.'));
					String command = "";
					String argument = "";
					int index = -1;
					// Find the index of the object in the ArrayList
					for (int i = 0; i < programObjects.size(); i++)
					{
						if (programObjects.get(i).name.equals(object)
								&& !programObjects.get(i).isDisposed())
						{
							index = i;
							break;
						}
					}
					if (index != -1)
					{
						command = "";
						if (text.contains(" "))
						{
							command = text.substring(text.indexOf('.') + 1,
									text.indexOf(' '));
						}
						else
						{
							command = text.substring(text.indexOf('.') + 1,
									text.length());
						}
					}
					if (command.contains("("))
					{
						if (command.contains(")"))
						{
							argument = command.substring(
									command.indexOf('(') + 1,
									command.indexOf(')'));
							command = command.substring(0, command.indexOf('('));
						}
					}
					command = command.toLowerCase();
					argument = argument.toLowerCase();
					// System.out.println(command);
					// System.out.println(argument);
					if (command.equals(""))
					{
						
					}
					else if (argument.equals(""))
					{
						/*
						 * back(int n) / bk(int n) done forward(int n) / fd(int n) done distance(Llama n) done lt(int n) / leftTurn(int n) done rt(int n) /
						 * rightTurn(int n) done infront() done behind() done pd() / penDown() done pu() / penUp() done position() / pos() done remove() - Will
						 * not be implemented; this should not be a method of the llama itself.
						 */
						if (command.equals("infront"))
						{
							for (Llama l : programObjects)
							{
								if (!l.isDisposed())
								{
									programObjects.get(index).moveAbove(l);
								}
							}
							programObjects.get(index).inFront();
						}
						else if (command.equals("behind"))
						{
							for (Llama l : programObjects)
							{
								if (!l.isDisposed())
								{
									programObjects.get(index).moveBelow(l);
								}
							}
							programObjects.get(index).behind();
						}
						else if (command.equals("pd"))
						{
							programObjects.get(index).pd();
						}
						else if (command.equals("pendown"))
						{
							programObjects.get(index).pd();
						}
						else if (command.equals("pu"))
						{
							programObjects.get(index).pu();
						}
						else if (command.equals("penup"))
						{
							programObjects.get(index).pu();
						}
						else if (command.equals("position"))
						{
							// Point objectPosition = programObjects.get(index)
							// .position();
							// return objectPosition;
						}
						else if (command.equals("penSize"))
						{
							// return programObjects.get(index).penSize();
						}
						else if (command.equals("getx"))
						{
							// Point objectPosition = programObjects.get(index)
							// .position();
							// return objectPosition.x;
						}
						else if (command.equals("gety"))
						{
							// Point objectPosition = programObjects.get(index)
							// .position();
							// return objectPosition.y;
						}
						else if (command.equals("visible"))
						{
							programObjects.get(index).visible();
						}
						else if (command.equals("invisible"))
						{
							programObjects.get(index).invisible();
						}
					}
					else
					{
						final int oldx = programObjects.get(index).x;
						final int oldy = programObjects.get(index).y;
						if (command.equals("back"))
						{
							programObjects.get(index).back(
									Integer.parseInt(argument));
							if (programObjects.get(index).penDown)
							{
								Line line = new Line(
										programObjects.get(index).x,
										programObjects.get(index).y,
										oldx,
										oldy,
										programObjects.get(index).penSize,
										new Color(
												display.getDisplay(),
												programObjects.get(index).penColor));
								lines.add(line);
								display.redraw();
							}
						}
						// System.out.println(command);
						if (command.equals("drawtext"))
						{
							GC gc = new GC(oldImage);
							gc.drawText(argument, programObjects.get(index).x,
									programObjects.get(index).y);
							display.redraw();
							gc.dispose();
							// System.out.println("drew " + argument);
						}
						if (command.equals("setx"))
						{
							if (programObjects.get(index).penDown)
							{
								Line line = new Line(
										programObjects.get(index).x,
										programObjects.get(index).y,
										Integer.parseInt(argument),
										programObjects.get(index).y,
										programObjects.get(index).penSize,
										new Color(
												display.getDisplay(),
												programObjects.get(index).penColor));
								lines.add(line);
								display.redraw();
							}
							programObjects.get(index).x = (Integer
									.parseInt(argument));
							programObjects.get(index).refreshBounds();
						}
						if (command.equals("sety"))
						{
							if (programObjects.get(index).penDown)
							{
								Line line = new Line(
										programObjects.get(index).x,
										programObjects.get(index).y,
										programObjects.get(index).x,
										Integer.parseInt(argument),
										programObjects.get(index).penSize,
										new Color(
												display.getDisplay(),
												programObjects.get(index).penColor));
								lines.add(line);
								display.redraw();
							}
							programObjects.get(index).y = (Integer
									.parseInt(argument));
							programObjects.get(index).refreshBounds();
						}
						if (command.equals("bk"))
						{
							programObjects.get(index).back(
									Integer.parseInt(argument));
							if (programObjects.get(index).penDown)
							{
								Line line = new Line(
										programObjects.get(index).x,
										programObjects.get(index).y,
										oldx,
										oldy,
										programObjects.get(index).penSize,
										new Color(
												display.getDisplay(),
												programObjects.get(index).penColor));
								lines.add(line);
								display.redraw();
							}
							
						}
						if (command.equals("forward"))
						{
							programObjects.get(index).forward(
									Integer.parseInt(argument));
							if (programObjects.get(index).penDown)
							{
								Line line = new Line(
										programObjects.get(index).x,
										programObjects.get(index).y,
										oldx,
										oldy,
										programObjects.get(index).penSize,
										new Color(
												display.getDisplay(),
												programObjects.get(index).penColor));
								lines.add(line);
								display.redraw();
							}
						}
						if (command.equals("fd"))
						{
							programObjects.get(index).forward(
									Integer.parseInt(argument));
							if (programObjects.get(index).penDown)
							{
								Line line = new Line(
										programObjects.get(index).x,
										programObjects.get(index).y,
										oldx,
										oldy,
										programObjects.get(index).penSize,
										new Color(
												display.getDisplay(),
												programObjects.get(index).penColor));
								lines.add(line);
								display.redraw();
							}
						}
						if (command.equals("distance"))
						{
							Llama llama = programObjects.get(index);
							Llama a = llama;
							for (Llama l : programObjects)
							{
								if (l.name.equalsIgnoreCase(argument)
										&& !l.isDisposed())
								{
									a = l;
									break;
								}
							}
							int distance = (int) Math.sqrt(Math.pow(
									(a.x - llama.x), 2)
									+ Math.pow((a.y - llama.y), 2));
							returner(distance);
						}
						if (command.equals("lt"))
						{
							programObjects.get(index).lt(
									Integer.parseInt(argument));
							
						}
						if (command.equals("leftturn"))
						{
							programObjects.get(index).lt(
									Integer.parseInt(argument));
							
						}
						if (command.equals("rt"))
						{
							programObjects.get(index).rt(
									Integer.parseInt(argument));
							
						}
						if (command.equals("rightturn"))
						{
							programObjects.get(index).rt(
									Integer.parseInt(argument));
							
						}
						if (command.equals("towards"))
						{
							Llama a = programObjects.get(index);
							for (Llama l : programObjects)
							{
								if (l.name.equalsIgnoreCase(argument)
										&& !l.isDisposed())
								{
									a = l;
									break;
								}
							}
							programObjects.get(index).towards(a);
						}
						else if (command.equals("resize"))
						{
							programObjects.get(index).resize(
									Integer.parseInt(argument));
						}
					}
				}
				else
				{
					String command = text.substring(0, text.indexOf('('));
					// addLlama(Llama n) //Interpreter passes a llama to be
					// added to the screen.
					// show(String s) //Display in text box
					// Turtle.COMMANDS //All turtle commands
					// colorUnder(Llama n) //Very low priority
					// touching(Llama n, Llama m) //Return true or false
					// freezeBg() //Very low priority
					// unFreezeBg() //Very low priority
					// announce(String s) //Display message dialog.
					// question(String s) //Display yes/no dialog and return
					// true if yes and false if no.
					if (command.equals("addLlama"))
					{
						Llama arg = (Llama) args[0]; // Create new Llama from
														// object
						newFieldLlama(arg); // Add llama to field
					}
					else if (command.equals("show"))
					{
						String arg = "";
						if (args[0] instanceof Double)
						{
							arg = String.valueOf(args[0]);
						}
						else
						{
							arg = (String) args[0];
						}
						echo(arg);
					}
					else if (command.equals("colorUnder"))
					{
						Llama arg1 = (Llama) args[0];
						for (int i = lines.size() - 1; i >= 0; i--)
						{
							if (lines.get(i).contains(arg1.position()))
							{
								returner(lines.get(i).getColor());
							}
						}
						returner(display.getBackground());
					}
					else if (command.equals("touching"))
					{
						Llama arg1 = (Llama) args[0];
						Llama arg2 = (Llama) args[1];
						Rectangle rect1 = new Rectangle(arg1.x, arg1.y,
								arg1.width, arg1.height);
						Rectangle rect2 = new Rectangle(arg2.x, arg2.y,
								arg2.width, arg2.height);
						returner(rect1.intersects(rect2));
					}
					else if (command.equals("freezeBg"))
					{
						frozenLines = new ArrayList<Line>();
						frozenLines.addAll(lines);
						frozen = true;
					}
					else if (command.equals("unFreezeBg"))
					{
						frozenLines = new ArrayList<Line>();
						frozen = true;
					}
					else if (command.equals("announce"))
					{
						String announceString = (String) args[0];
						MessageBox questionBox = new MessageBox(getShell(),
								SWT.ICON_INFORMATION | SWT.OK);
						questionBox.setText("Announcement");
						questionBox.setMessage(announceString);
					}
					else if (command.equals("question"))
					{
						String questionString = (String) args[0];
						MessageBox questionBox = new MessageBox(getShell(),
								SWT.ICON_QUESTION | SWT.YES | SWT.NO);
						questionBox.setText("Question");
						questionBox.setMessage(questionString);
						int response = questionBox.open();
						returner(response == SWT.YES);
					}
					else if (command.equals("clear"))
					{
						if (frozen)
						{
							lines = new ArrayList<Line>();
							lines.addAll(frozenLines);
						}
						else
						{
							lines = new ArrayList<Line>();
							oldImage = new Image(display.getDisplay(), display
									.getSize().x, display.getSize().y);
						}
						display.redraw();
					}
				}
				// return null;
			};
		});
		return returnObject;
	}
	
	/**
	 * Add a llama object to the playing field
	 */
	public void newFieldLlama(Llama l)
	{
		if (l.getImage() == null)
		{
			l.setImage(objectLabels[checkBank()].getImage());// Use the image of the selected llama
		}
		// l.setBackground(null);
		final int spot = programObjects.size();// The index of the new llama in the ArrayList
		programObjects.add(l);// Add copy to the ArrayList
		int j = 0;
		l.name = "";
		do
		{
			if (!isTaken("Object" + (spot + j), false))
			{
				l.name = "Object" + (spot + j); // Store name in Llama
			}
			j++;
		} while (l.name.equals("")); // Keep trying higher numbers until you reach a name that isn't taken
		listObjects.add(l.name); // Add a corresponding entry to the list
		final Menu popupMenu = new Menu(programObjects.get(spot));// Create right-click menu for Field objects
		MenuItem nameItem = new MenuItem(popupMenu, SWT.NONE);
		nameItem.setText(l.name);
		nameItem.setEnabled(false);
		new MenuItem(popupMenu, SWT.SEPARATOR);
		MenuItem removeItem = new MenuItem(popupMenu, SWT.NONE);
		removeItem.setText("Remove");
		removeItem.addSelectionListener(new SelectionAdapter()
		{
			public void widgetSelected(SelectionEvent e)
			{
				// Remove llama from field
				Llama toRemove = programObjects.get(spot);
				toRemove.dispose();
				listObjects.remove(toRemove.name);
			}
		});
		MenuItem renameItem = new MenuItem(popupMenu, SWT.NONE);
		renameItem.setText("Rename");
		renameItem.addSelectionListener(new SelectionAdapter()
		{
			public void widgetSelected(SelectionEvent e)
			{
				InputDialog input = new InputDialog(display.getShell(),
						"Rename Llama",
						"Type a new name for your llama, than press OK", "",
						null);
				input.open();
				String name = input.getValue();
				if (name != null && !isTaken(name, true))
				{
					listObjects.setItem(
							listObjects.indexOf(programObjects.get(spot).name),
							name);
					programObjects.get(spot).name = name;
					programObjects.get(spot).getMenu().getItems()[0]
							.setText(name);
				}
			}
		});
		MenuItem colorItem = new MenuItem(popupMenu, SWT.NONE);
		colorItem.setText("Set Color");
		colorItem.addSelectionListener(new SelectionAdapter()
		{
			public void widgetSelected(SelectionEvent e)
			{
				ColorDialog cd = new ColorDialog(getShell());
				cd.setRGB(programObjects.get(spot).penColor);
				programObjects.get(spot).penColor = cd.open();
			}
		});
		MenuItem imageItem = new MenuItem(popupMenu, SWT.NONE);
		imageItem.setText("Set Image");
		imageItem.addSelectionListener(new SelectionAdapter()
		{
			public void widgetSelected(SelectionEvent e)
			{
				// Check to see which, if any, llama has been selected
				int selected = -1;// Assume no llama is selected
				for (int i = 0; i < 32; i++)
				{
					if (selectedObject[i])
					{
						selected = i;// Llama[i] is currently selected
					}
				}
				if (selected == -1)// If no llama is selected
				{
					// Let the user know that they must select a llama to add to
					// the field
					MessageBox messageDialog = new MessageBox(getShell());
					messageDialog.setText("Error");
					messageDialog.setMessage("No image selected.");
					messageDialog.open();
				}
				else
				{
					programObjects.get(spot).setImage(objectLabels[selected].getImage());
				}
			}
		});
		
		programObjects.get(spot).setMenu(popupMenu);// Associate menu with the
													// object
		
		programObjects.get(spot).addDragDetectListener(
				new DragDetectListener()
				{
					public void dragDetected(DragDetectEvent arg0)
					{
						objectBeingDragged = spot;// Drag capability
					}
				});
		programObjects.get(spot).addMouseMoveListener(new MouseMoveListener()
		{
			public void mouseMove(MouseEvent arg0)
			{
				Llama moved = (Llama) arg0.widget;
				int mouseX = arg0.x;
				int mouseY = arg0.y;
				int objectX = moved.x;
				int objectY = moved.y;
				if (spot == objectBeingDragged
						&& !outOfBounds(mouseX + objectX, mouseY + objectY))
				{
					// Have object follow mouse while being dragged
					// ((Llama) arg0.widget).setBounds(mouseX + objectX - 32,
					// mouseY + objectY - 32, 64, 64);
					moved.x = mouseX - moved.width / 2 + objectX;
					moved.y = mouseY - moved.height / 2 + objectY;
					moved.refreshBounds();
				}
			}
			
			private boolean outOfBounds(int X, int Y)// Don't leave the playing
														// field
			{
				Point size = display.getSize();// Get size of field
				if (X >= size.x/* right */|| Y >= size.y/* bottom */|| X < 0/* left */
						|| Y < 0/* top */)
				{
					return true;
				}
				return false;
			}
		});
		programObjects.get(spot).addMouseListener(new MouseAdapter()
		{
			public void mouseDown(MouseEvent e)
			{
				if (e.button == 3)// right mouse click
				{
					popupMenu.setVisible(true);// used for listObjects right
												// click event
				}
			}
			
			public void mouseUp(MouseEvent e)
			{
				if (spot == objectBeingDragged)
				{
					objectBeingDragged = -1;// Release object from mouse
				}
			}
			
			public void mouseDoubleClick(MouseEvent e)
			{
				if (e.button == 1)// left mouse click
				{
					commandLine.append(programObjects.get(spot).name + ".");
					commandLine.setFocus();// put cursor in commandLine
				}
			}
		});
	}
	
	public void newFieldLlama2(final String theName)
	{
		
		Display.getDefault().syncExec(new Runnable()
		{
			public void run()
			{
				Llama l = new Llama(display, 50, 50, 91, 91);
				l.setImage(defaultLlama);// Use the image of the selected llama
				// l.setBackground(null);
				final int spot = programObjects.size();// The index of the new
														// llama in the
														// ArrayList
				programObjects.add(l);// Add copy to the ArrayList
				int j = 0;
				l.name = theName;
				while (l.name.equals(""))
				{
					if (!isTaken("Object" + (spot + j), false))
					{
						l.name = "Object" + (spot + j); // Store name in Llama
					}
					j++;
				} // Keep trying higher numbers until you reach a name that
					// isn't taken
				listObjects.add(l.name); // Add a corresponding entry to the
											// list
				final Menu popupMenu = new Menu(programObjects.get(spot));// Create
																			// right-click
																			// menu
																			// for
																			// Field
																			// objects
				MenuItem nameItem = new MenuItem(popupMenu, SWT.NONE);
				nameItem.setText(l.name);
				nameItem.setEnabled(false);
				new MenuItem(popupMenu, SWT.SEPARATOR);
				MenuItem removeItem = new MenuItem(popupMenu, SWT.NONE);
				removeItem.setText("Remove");
				removeItem.addSelectionListener(new SelectionAdapter()
				{
					public void widgetSelected(SelectionEvent e)
					{
						// Remove llama from field
						Llama toRemove = programObjects.get(spot);
						toRemove.dispose();
						listObjects.remove(toRemove.name);
					}
				});
				MenuItem renameItem = new MenuItem(popupMenu, SWT.NONE);
				renameItem.setText("Rename");
				renameItem.addSelectionListener(new SelectionAdapter()
				{
					public void widgetSelected(SelectionEvent e)
					{
						InputDialog input = new InputDialog(
								display.getShell(),
								"Rename Llama",
								"Type a new name for your llama, than press OK",
								"", null);
						input.open();
						String name = input.getValue();
						if (name != null && !isTaken(name, true))
						{
							listObjects.setItem(listObjects
									.indexOf(programObjects.get(spot).name),
									name);
							programObjects.get(spot).name = name;
							programObjects.get(spot).getMenu().getItems()[0]
									.setText(name);
						}
					}
				});
				MenuItem colorItem = new MenuItem(popupMenu, SWT.NONE);
				colorItem.setText("Set Color");
				colorItem.addSelectionListener(new SelectionAdapter()
				{
					public void widgetSelected(SelectionEvent e)
					{
						ColorDialog cd = new ColorDialog(getShell());
						cd.setRGB(programObjects.get(spot).penColor);
						programObjects.get(spot).penColor = cd.open();
					}
				});
				
				programObjects.get(spot).setMenu(popupMenu);// Associate menu
															// with the object
				
				programObjects.get(spot).addDragDetectListener(
						new DragDetectListener()
						{
							public void dragDetected(DragDetectEvent arg0)
							{
								objectBeingDragged = spot;// Drag capability
							}
						});
				programObjects.get(spot).addMouseMoveListener(
						new MouseMoveListener()
						{
							public void mouseMove(MouseEvent arg0)
							{
								Llama moved = (Llama) arg0.widget;
								int mouseX = arg0.x;
								int mouseY = arg0.y;
								int objectX = moved.x;
								int objectY = moved.y;
								if (spot == objectBeingDragged
										&& !outOfBounds(mouseX + objectX,
												mouseY + objectY))
								{
									// Have object follow mouse while being
									// dragged
									// ((Llama) arg0.widget).setBounds(mouseX +
									// objectX - 32, mouseY + objectY - 32, 64,
									// 64);
									moved.x = mouseX - moved.width / 2
											+ objectX;
									moved.y = mouseY - moved.height / 2
											+ objectY;
									moved.refreshBounds();
								}
							}
							
							private boolean outOfBounds(int X, int Y)// Don't
																		// leave
																		// the
																		// playing
																		// field
							{
								Point size = display.getSize();// Get size of
																// field
								if (X >= size.x/* right */|| Y >= size.y/* bottom */
										|| X < 0/* left */|| Y < 0/* top */)
								{
									return true;
								}
								return false;
							}
						});
				programObjects.get(spot).addMouseListener(new MouseAdapter()
				{
					public void mouseDown(MouseEvent e)
					{
						if (e.button == 3)// right mouse click
						{
							popupMenu.setVisible(true);// used for listObjects
														// right click event
						}
					}
					
					public void mouseUp(MouseEvent e)
					{
						if (spot == objectBeingDragged)
						{
							objectBeingDragged = -1;// Release object from mouse
						}
					}
					
					public void mouseDoubleClick(MouseEvent e)
					{
						if (e.button == 1)// left mouse click
						{
							commandLine.append(programObjects.get(spot).name
									+ ".");
							commandLine.setFocus();// put cursor in commandLine
						}
					}
				});
			}
		});
	}
	
	public Composite getDisplay()
	{
		return display;
	}
	
	public int getMouseX()
	{
		return mx;
	}
	
	public int getMouseY()
	{
		return my;
	}
	
	@Override
	public void mouseMove(MouseEvent e)
	{
		my = e.y;
		mx = e.x;
		// System.out.println("my: "+my);
		// System.out.println("mx: "+mx);
	}
	
	public int checkBank()
	{
		// Check to see which, if any, llama has been selected
		int selected = -1;// Assume no llama is selected
		for (int i = 0; i < 32; i++)
		{
			if (selectedObject[i])
			{
				selected = i;// Llama[i] is currently selected
			}
		}
		if (selected == -1)// If no llama is selected
		{
			// Let the user know that they must select a llama to add to
			// the field
			MessageBox messageDialog = new MessageBox(getShell());
			messageDialog.setText("Error");
			messageDialog.setMessage("No object selected.");
			messageDialog.open();
		}
		return selected;
	}
}
